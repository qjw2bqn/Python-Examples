# 存在一些问题
# 请参见：
# https://github.com/younggis/PostGIS-Examples/sqlserver生成椭圆.sql


#105.44,28.89,105.46,28.87
#POLYGON ((105.455787918451 28.885787918451,105.455987918451 28.885587918452,105.456187918451 28.885387918452,105.456387918450 28.885187918452,105.456587918450 28.884987918453,105.456787918450 28.884787918453,105.456944562645 28.884544562649,105.457144562644 28.884344562649,105.457344562644 28.884144562649,105.457500877122 28.883900877128,105.457700877122 28.883700877129,105.457856854246 28.883456854253,105.458012486076 28.883212486084,105.458212486076 28.883012486084,105.458367764358 28.882767764368,105.458522680504 28.882522680514,105.458677225569 28.882277225580,105.458877225569 28.882077225580,105.459031390240 28.881831390252,105.459185164801 28.881585164814,105.459338539119 28.881338539133,105.459444044234 28.881044044248,105.459596152415 28.880796152430,105.459747815063 28.880547815078,105.459899019506 28.880299019522,105.459999999992 28.880000000008,105.460149747460 28.879749747477,105.460298979476 28.879498979494,105.460395831514 28.879195831533,105.460543416480 28.878943416500,105.460636809237 28.878636809258,105.460727692558 28.878327692579,105.460872135944 28.878072135966,105.460958898932 28.877758898955,105.461042640676 28.877442640699,105.461123105614 28.877123105637,105.461199999988 28.876800000012,105.461272983334 28.876472983359,105.461341657374 28.876141657399,105.461405551263 28.875805551289,105.461464101602 28.875464101629,105.461516624777 28.875116624804,105.461562277646 28.874762277674,105.461599999985 28.874400000014,105.461538612773 28.873938612802,105.461549509741 28.873549509772,105.461436067962 28.873036067993,105.461399999984 28.872600000016,105.461181138814 28.871981138846,105.461024744855 28.871424744888,105.459999999983 28.870000000017,105.458575255112 28.868975255145,105.458018861154 28.868818861186,105.457399999984 28.868600000016,105.456963932007 28.868563932038,105.456450490228 28.868450490259,105.456061387198 28.868461387227,105.455599999986 28.868400000015,105.455237722326 28.868437722354,105.454883375196 28.868483375223,105.454535898371 28.868535898398,105.454194448711 28.868594448737,105.453858342601 28.868658342626,105.453527016641 28.868727016666,105.453199999988 28.868800000012,105.452876894363 28.868876894386,105.452557359301 28.868957359324,105.452241101045 28.869041101068,105.451927864035 28.869127864056,105.451672307421 28.869272307442,105.451363190742 28.869363190763,105.451056583500 28.869456583520,105.450804168467 28.869604168486,105.450501020506 28.869701020524,105.450250252523 28.869850252540,105.449999999992 28.870000000008,105.449700980478 28.870100980494,105.449452184922 28.870252184937,105.449203847570 28.870403847585,105.448955955752 28.870555955766,105.448661460867 28.870661460881,105.448414835186 28.870814835199,105.448168609748 28.870968609760,105.447922774420 28.871122774431,105.447722774420 28.871322774431,105.447477319486 28.871477319496,105.447232235632 28.871632235642,105.446987513916 28.871787513924,105.446787513916 28.871987513924,105.446543145747 28.872143145754,105.446299122871 28.872299122878,105.446099122872 28.872499122878,105.445855437351 28.872655437356,105.445655437351 28.872855437356,105.445455437351 28.873055437355,105.445212081547 28.873212081550,105.445012081547 28.873412081550,105.444812081548 28.873612081550,105.444612081548 28.873812081549,105.444412081548 28.874012081549,105.444212081549 28.874212081549,105.444012081549 28.874412081548,105.443812081549 28.874612081548,105.443612081550 28.874812081548,105.443412081550 28.875012081547,105.443212081550 28.875212081547,105.443055437355 28.875455437351,105.442855437356 28.875655437351,105.442655437356 28.875855437351,105.442499122878 28.876099122872,105.442299122878 28.876299122871,105.442143145754 28.876543145747,105.441987513924 28.876787513916,105.441787513924 28.876987513916,105.441632235642 28.877232235632,105.441477319496 28.877477319486,105.441322774431 28.877722774420,105.441122774431 28.877922774420,105.440968609760 28.878168609748,105.440814835199 28.878414835186,105.440661460881 28.878661460867,105.440555955766 28.878955955752,105.440403847585 28.879203847570,105.440252184937 28.879452184922,105.440100980494 28.879700980478,105.440000000008 28.879999999992,105.439850252540 28.880250252523,105.439701020524 28.880501020506,105.439604168486 28.880804168467,105.439456583520 28.881056583500,105.439363190763 28.881363190742,105.439272307442 28.881672307421,105.439127864056 28.881927864034,105.439041101068 28.882241101045,105.438957359324 28.882557359301,105.438876894386 28.882876894363,105.438800000012 28.883199999988,105.438727016666 28.883527016641,105.438658342626 28.883858342601,105.438594448737 28.884194448711,105.438535898398 28.884535898371,105.438483375223 28.884883375196,105.438437722354 28.885237722326,105.438400000015 28.885599999986,105.438461387227 28.886061387198,105.438450490259 28.886450490228,105.438563932038 28.886963932007,105.438600000016 28.887399999984,105.438818861186 28.888018861154,105.438975255145 28.888575255112,105.440000000017 28.889999999983,105.441424744888 28.891024744855,105.441981138846 28.891181138814,105.442600000016 28.891399999984,105.443036067993 28.891436067962,105.443549509772 28.891549509741,105.443938612802 28.891538612773,105.444400000014 28.891599999985,105.444762277674 28.891562277646,105.445116624804 28.891516624777,105.445464101629 28.891464101602,105.445805551289 28.891405551263,105.446141657399 28.891341657374,105.446472983359 28.891272983334,105.446800000012 28.891199999988,105.447123105637 28.891123105614,105.447442640699 28.891042640676,105.447758898955 28.890958898932,105.448072135965 28.890872135944,105.448327692579 28.890727692558,105.448636809258 28.890636809237,105.448943416500 28.890543416480,105.449195831533 28.890395831514,105.449498979494 28.890298979476,105.449749747477 28.890149747460,105.450000000008 28.889999999992,105.450299019522 28.889899019506,105.450547815078 28.889747815063,105.450796152430 28.889596152415,105.451044044248 28.889444044234,105.451338539133 28.889338539119,105.451585164814 28.889185164801,105.451831390252 28.889031390240,105.452077225580 28.888877225569,105.452277225580 28.888677225569,105.452522680514 28.888522680504,105.452767764368 28.888367764358,105.453012486084 28.888212486076,105.453212486084 28.888012486076,105.453456854253 28.887856854246,105.453700877129 28.887700877122,105.453900877128 28.887500877122,105.454144562649 28.887344562644,105.454344562649 28.887144562644,105.454544562649 28.886944562645,105.454787918453 28.886787918450,105.454987918453 28.886587918450,105.455187918452 28.886387918450,105.455387918452 28.886187918451,105.455587918452 28.885987918451,105.455787918451 28.885787918451))


# -*- coding: utf-8 -*-
"""
Created on Fri Jul 24 10:19:39 2020

@author: Administrator
"""
import math

#l 长半轴长度
def createEllipse(w):
    h=0.58*w
    interval=w/50.0
    xlist=[]
    ylist=[]
    for i in range(0,51):
        x=interval*i
        y=abs(math.sqrt((1-math.pow(x,2)/math.pow(w,2))*math.pow(h,2)))
        xlist.append(x)
        ylist.append(y)
    list=[]
    for i in range(0,51):
        list.append([xlist[i],ylist[i]])
    for i in range(0,51):
        list.append([xlist[50-i],-ylist[50-i]])
    for i in range(0,51):
        list.append([-xlist[i],-ylist[i]])
    for i in range(0,51):
        list.append([-xlist[50-i],ylist[50-i]])
    return list
def createWKT(list):
    wkt='POLYGON (('
    for i in range(len(list)):
        if i==len(list)-1:
            wkt+=str(list[i][0])+' '+str(list[i][1])
        else:
            wkt+=str(list[i][0])+' '+str(list[i][1])+','
    wkt+='))'
    return wkt
#平移矩阵
def translationmatrix(x,y,diff_x,diff_y):
    x1=x+diff_x
    y1=y+diff_y
    return [x1,y1]
#旋转矩阵
def roatematrix(x,y,angle):
    x1=x*math.cos(angle)-y*math.sin(angle)
    y1=x*math.sin(angle)+y*math.cos(angle)
    return [x1,y1]
# 计算距离
def distince(x1,y1,x2,y2):
    return math.sqrt(math.pow((x2-x1),2)+math.pow((y2-y1),2))
# 计算方位角函数
def azimuthAngle(x1, y1, x2, y2):
    angle = 0.0
    dx = x2 - x1
    dy = y2 - y1
    if x2 == x1:
        angle = math.pi / 2.0
        if y2 == y1 :
            angle = 0.0
        elif y2 < y1 :
            angle = 3.0 * math.pi / 2.0
    elif x2 > x1 and y2 > y1:
        angle = math.atan(dx / dy)
    elif x2 > x1 and y2 < y1 :
        angle = math.pi / 2 + math.atan(-dy / dx)
    elif x2 < x1 and y2 < y1 :
        angle = math.pi + math.atan(dx / dy)
    elif x2 < x1 and y2 > y1 :
        angle = 3.0 * math.pi / 2.0 + math.atan(dy / -dx)
    return (angle * 180 / math.pi)
if __name__ == "__main__":
    s=[105.44,28.89]
    e=[105.46,28.87]
    l=distince(s[0],s[1],e[0],e[1])
    print(l)
    angle=azimuthAngle(s[0],s[1],e[0],e[1])
    print(angle)
    diff_x=(s[0]+e[0])/2.0
    diff_y=(s[1]+e[1])/2.0
    list =createEllipse(l/2.0)
    matrixed=[]
    for i in range(len(list)):
        roated=roatematrix(list[i][0],list[i][1],angle)
        #translated=translationmatrix(roated[0],roated[1],diff_x,diff_y)
        matrixed.append(roated)
    wkt=createWKT(matrixed)
    print(wkt)
        
        